Начало проекта:

Создать Виртуальное окружение(нужно чтобы расширения не конфликтовали между собой) -->python -m venv venv 
Активация виртуального окружения(В КОРНЕВОЙ ПАПКЕ ГДЕ ЛЕЖИТ venv) --> .\venv\Scripts\Activate.ps1 (запускать при каждой новой сесии
Создание проекта джанго(добавит структуру проекта) --> Django-admin startproject Название


Работа с гитом и гитхабом:

Pull взять изменения из репозитория
Push отправить изменения в репозиторий

Создать гит файл в папке --> git init
Сказать коду куда отправлять код в гитхабе --> git remote add origin ссылка на репозиторий
Посмотреть отправную точку в гит хаб --> git remote -v
Сделать пулл с обьеденением историй(например если при создании репозитория выбран шаблон гит игнора он сделает первый коммит и будет конликт поэтому если уверен что хочешь их обьеденить можешь использовать это) --> git pull origin main --allow-unrelated-histories
Переименовать текущую ветку в мейн даже если ее имя и есть мейн --> git branch -M main
Отправить код в текущую ветку и запомнить куда отправлять(-u) --> git push -u origin main

python manage.py makemigrations --> Django смотрит на твои модели и создаёт файл с изменениями
python manage.py migrate --> Django читает файл миграции и вносит изменения в базу данных


Работа с админкой

python manage.py createsuperuser --> Создать супер-юзера
admin.site.register(Product) --> Регистрирует модель в админке



Поля в джанго

Текстовые поля
- CharField — короткий текст, требует max_length
- TextField — длинный текст, например описание
- SlugField — для URL-идентификаторов (только латиница, цифры, дефис)


Числовые поля
- IntegerField — целое число
- PositiveIntegerField — только положительные числа
- FloatField — число с плавающей точкой (не рекомендуется для денег)
- DecimalField — точное число с фиксированной запятой (идеально для цен)

Дата и время
auto_now = True --> записывает дату обновления обьекта
auto_now_add = True --> записывает дату создания обьекта и не изменяемо
- DateField — только дата
- TimeField — только время
- DateTimeField — дата и время
- DurationField — продолжительность (например, "2 часа")


Логические поля
- BooleanField — True или False
- NullBooleanField — True, False или None (устарел, лучше BooleanField(null=True))


Файлы и изображения
- FileField — загрузка файлов
- ImageField — загрузка изображений (требует Pillow)


Связи между моделями
- ForeignKey — связь «один ко многим»
- OneToOneField — связь «один к одному»
- ManyToManyField — связь «многие ко многим»

Создание читаемой таблицы в админке
class ProductAdmin(admin.ModelAdmin):
    list_display = ('name', 'price', 'added_on','produced_by','availability') --> то что будет выводиться в таблицу в админке
    list_filter = ('availability','produced_by') --> фильтры поиска
    search_fields = ('name') --> строка поиска сверху



